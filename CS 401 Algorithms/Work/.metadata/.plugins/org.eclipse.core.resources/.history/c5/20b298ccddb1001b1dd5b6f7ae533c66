import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import edu.princeton.cs.algs4.Point2D;
import edu.princeton.cs.algs4.Stack;
import edu.princeton.cs.algs4.StdDraw;

public class ConvexHullBuilder {
	
	Iterable<Point2D> finalHull;
	ArrayList<Point2D> tempArray;
	
	public ConvexHullBuilder(ArrayList<Point2D> arraylist) {
		finalHull = arraylist;
		tempArray = new ArrayList<Point2D>(arraylist);
	}
	
	public Iterable<Point2D> sortY(Iterable<Point2D> list) {
		
		Collections.sort(tempArray);		
		list = tempArray;
		
		return list;
	}
	
	public Iterable<Point2D> polar(Iterable<Point2D> hull) { //done
		ArrayList<Point2D> list = new ArrayList<Point2D>();
		Point2D startPoint;
		Iterator<Point2D> iter = hull.iterator();
		startPoint = iter.next();
		
		while (iter.hasNext()) {
			Point2D temp = iter.next();
			list.add(temp);			
			Collections.sort(list, startPoint.polarOrder());
		}
		
		Collections.reverse(list);
		
		hull = list;
		
		return hull;
	}
	
	public static Point2D next_to_top(Stack<Point2D> stack) {
		Iterator iter = stack.iterator();
		int counter = 0;
		Point2D nextTop = null;
		while (iter.hasNext()) {
			if (counter == 2) {
				break;
			}
			nextTop = (Point2D) iter.next();
			counter++;
		}
		
		System.out.println("Next to Top: " + nextTop.x() + " " + nextTop.y());
		
		return nextTop;
	}
	
	public Iterable<Point2D> leftOrRight(Iterable<Point2D> hull, Point2D start) {
		Stack<Point2D> stack = new Stack<Point2D>();
		Iterator<Point2D> iter = finalHull.iterator();
		Iterator<Point2D> stackIter = stack.iterator();
//		ArrayList<Point2D> list = new ArrayList<Point2D>();
		ArrayList<Point2D> finalList = new ArrayList<Point2D>();
		
//		while (iter.hasNext()) { //add everything to list to be sorted
//			list.add(iter.next());
//		}
		
		for (Point2D point: hull) {
			while (stack.size() > 1 && point.ccw(next_to_top(stack), stack.peek(), point) < 0) {
				stack.pop();
			}	
			stack.push(point);
		}
		
		System.out.println("stack size: " + stack.size());
		
		while (stackIter.hasNext()) {
			System.out.println(stackIter.next().x() + " " + stackIter.next().y());
			//finalList.add(stackIter.next());
		}
		
//		if (list.size() == 1) { //add starting point (not in array) 
//			finalList.add(start); // add starting point
//			
//		} else if (list.size() > 1) {
//			System.out.println(list.get(0));
//			finalList.add(list.get(0));
//			
//		}
//		
//		System.out.println("before processing:" + list.toString());
//		
//		if (list.size() > 2) {
//			
//			for (int i = 0; i < list.size() - 2; i++) {
//				for (int j = i + 1; j < list.size() - 1; j++) {
//					
//					if (list.get(i).ccw(list.get(i), list.get(j), list.get(j + 1)) == -1 && j + 1 == list.size() - 1) {
//						System.out.println("false");
//						break;
//					} else if (list.get(i).ccw(list.get(i), list.get(j), list.get(j + 1)) == 1 && j + 1 == list.size() - 1) {
//						System.out.println("true");
//						finalList.add(list.get(i));
//						finalList.add(list.get(j));
//						finalList.add(list.get(j + 1));
//					}
//				}
//			}
//			
//		}
		
//		System.out.println("before returning:" + finalList.toString());
		
		hull = finalList;
		
		return hull;
		
	}

	public Iterable<Point2D> hull() {
		Iterator<Point2D> iter = finalHull.iterator();
		Point2D startPoint = iter.next();
		
		sortY(finalHull);
		polar(finalHull);
		leftOrRight(finalHull, startPoint);
		
//		for (Point2D p : finalHull) {
//			System.out.println(p.x());
//			System.out.println(p.y());
//			System.out.println();
//		}
		
		
		//sort ascending based on y coordinate
		
		return finalHull;
	}
	
	
}
